/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 04 07:33:05 GMT 2020
 */

package array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import array.IsValidSudoku;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IsValidSudoku_ESTest extends IsValidSudoku_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IsValidSudoku isValidSudoku0 = new IsValidSudoku();
      char[][] charArray0 = new char[4][7];
      char[] charArray1 = new char[7];
      charArray1[0] = 'X';
      charArray1[1] = '+';
      charArray1[2] = '6';
      charArray1[3] = 'y';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        isValidSudoku0.isValidSudoku(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IsValidSudoku isValidSudoku0 = new IsValidSudoku();
      char[][] charArray0 = new char[6][1];
      char[] charArray1 = new char[3];
      charArray1[0] = '.';
      charArray0[1] = charArray1;
      boolean boolean0 = isValidSudoku0.isValidSudoku(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IsValidSudoku isValidSudoku0 = new IsValidSudoku();
      char[][] charArray0 = new char[6][1];
      boolean boolean0 = isValidSudoku0.isValidSudoku(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IsValidSudoku isValidSudoku0 = new IsValidSudoku();
      char[][] charArray0 = new char[0][5];
      boolean boolean0 = isValidSudoku0.isValidSudoku(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IsValidSudoku isValidSudoku0 = new IsValidSudoku();
      char[][] charArray0 = new char[4][7];
      boolean boolean0 = isValidSudoku0.isValidSudoku(charArray0);
      assertFalse(boolean0);
  }
}
