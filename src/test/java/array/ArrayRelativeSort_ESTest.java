/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 04 07:30:53 GMT 2020
 */

package array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import array.ArrayRelativeSort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayRelativeSort_ESTest extends ArrayRelativeSort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayRelativeSort arrayRelativeSort0 = new ArrayRelativeSort();
      int[] intArray0 = new int[0];
      int[] intArray1 = arrayRelativeSort0.relativeSortArray(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayRelativeSort arrayRelativeSort0 = new ArrayRelativeSort();
      // Undeclared exception!
      try { 
        arrayRelativeSort0.relativeSortArray((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("array.ArrayRelativeSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayRelativeSort arrayRelativeSort0 = new ArrayRelativeSort();
      int[] intArray0 = new int[6];
      intArray0[4] = (-1205);
      // Undeclared exception!
      try { 
        arrayRelativeSort0.relativeSortArray(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("array.ArrayRelativeSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayRelativeSort arrayRelativeSort0 = new ArrayRelativeSort();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = new int[1];
      int[] intArray2 = arrayRelativeSort0.relativeSortArray(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, (-1), (-1)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayRelativeSort arrayRelativeSort0 = new ArrayRelativeSort();
      int[] intArray0 = new int[11];
      intArray0[1] = (-1252);
      int[] intArray1 = new int[1];
      int[] intArray2 = arrayRelativeSort0.relativeSortArray(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayRelativeSort arrayRelativeSort0 = new ArrayRelativeSort();
      int[] intArray0 = new int[11];
      intArray0[1] = (-1252);
      int[] intArray1 = arrayRelativeSort0.relativeSortArray(intArray0, intArray0);
      assertEquals(11, intArray1.length);
  }
}
